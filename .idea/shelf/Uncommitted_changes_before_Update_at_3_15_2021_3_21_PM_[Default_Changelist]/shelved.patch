Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleops/autos/AutoOpMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.teleops.autos;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\n\r\nimport org.firstinspires.ftc.teamcode.RobotPos;\r\nimport org.firstinspires.ftc.teamcode.debug.JavaHTTPServer;\r\nimport org.firstinspires.ftc.teamcode.hardware.BotHardware;\r\nimport org.firstinspires.ftc.teamcode.hardware.auto.AutoController;\r\nimport org.firstinspires.ftc.teamcode.hardware.sound.Sounds;\r\nimport org.firstinspires.ftc.teamcode.hardware.vision.VuforiaMethods;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Autonomous(group = \"autos\", name = \"auto\")\r\npublic class AutoOpMode extends LinearOpMode {\r\n\r\n    protected AutoController controller;\r\n    protected VuforiaMethods vuforia;\r\n    protected RobotPos visionPos;\r\n\r\n    protected List<TimeTarget> timeTargets = new ArrayList<>();\r\n    protected List<TimeAction> timeActions = new ArrayList<>();\r\n\r\n    private int k = 0;\r\n\r\n    @Override\r\n    public void runOpMode() {\r\n        JavaHTTPServer.init();\r\n        JavaHTTPServer.pathData.clear();\r\n        final Sounds sounds = new Sounds(hardwareMap);\r\n\r\n        telemetry.addLine(\"STARTING\");\r\n        telemetry.update();\r\n\r\n        final BotHardware bh = new BotHardware(hardwareMap);\r\n        controller = new AutoController(bh, telemetry);\r\n        vuforia = new VuforiaMethods(hardwareMap);\r\n        vuforia.initVuforia();\r\n\r\n        final double yoff = -8;\r\n\r\n        timeTargets.add(new TimeTarget(0,new RobotPos(-48,-48,0)));\r\n        timeTargets.add(new TimeTarget(2,new RobotPos(-48,-48,-0.7)));\r\n        timeTargets.add(new TimeTarget(5,new RobotPos(-48,-48,0)));\r\n        // n=2 INSERT HERE //\r\n        timeTargets.add(new TimeTarget(14,new RobotPos(-24,-24,0)));\r\n        timeTargets.add(new TimeTarget(15,new RobotPos(-24,0,0)));\r\n\r\n\r\n        timeActions.add(new TimeAction(5f, new Runnable(){public void run(){\r\n            switch (vuforia.getRings()) {\r\n                case 0:\r\n                    sounds.play(\"b1\");\r\n                    sounds.play(\"b1\");\r\n                    timeTargets.add(3,new TimeTarget(7,new RobotPos(-48,-48,0.211)));\r\n                    timeTargets.add(4,new TimeTarget(8,new RobotPos(-60,8+yoff,0.211)));\r\n                    timeTargets.add(5,new TimeTarget(11,new RobotPos(-60,-24+yoff,0)));\r\n                    break;\r\n                case 1:\r\n                    sounds.play(\"b1\");\r\n                    sounds.play(\"b2\");\r\n                    timeTargets.add(3,new TimeTarget(7,new RobotPos(-48,-48,-0.141)));\r\n                    timeTargets.add(4,new TimeTarget(8,new RobotPos(-36,36+yoff,-0.141)));\r\n                    timeTargets.add(5,new TimeTarget(11,new RobotPos(-36,-24+yoff,0)));\r\n                    break;\r\n                case 3:\r\n                    sounds.play(\"b2\");\r\n                    sounds.play(\"b1\");\r\n                    timeTargets.add(3,new TimeTarget(7,new RobotPos(-48,-48,0.115)));\r\n                    timeTargets.add(4,new TimeTarget(8,new RobotPos(-60,56+yoff,0.115)));\r\n                    timeTargets.add(5,new TimeTarget(11,new RobotPos(-60,-24+yoff,0)));\r\n                    break;\r\n            }\r\n        }}));\r\n        //timeActions.add(new TimeAction(12, new Runnable() { public void run() {\r\n        //    bh.wobbleLifter.setPos(300);\r\n        //}}));\r\n        timeActions.add(new TimeAction(14, new Runnable() { public void run() {\r\n            bh.wobbleGrabber.setPosition(-0.3);\r\n        }}));\r\n\r\n        telemetry.addLine(\"READY\");\r\n        telemetry.update();\r\n\r\n        waitForStart();\r\n        bh.wobbleLifter.setPower(0*0.2);\r\n        //bh.wobbleLifter.setPos(150);\r\n        //bh.wobbleGrabber.setPosition(-0.7);\r\n        sounds.play(\"b1\");\r\n\r\n        controller.init(getRuntime());\r\n        controller.update(getRuntime());\r\n        controller.resetBasePos();\r\n        controller.setPos(new RobotPos(-48,-63.75,0));\r\n\r\n        double ts = getRuntime(), t = 0;\r\n        while (t < 16) { //30 seconds\r\n            try {\r\n                Thread.sleep(10);\r\n            } catch (InterruptedException ignored) {}\r\n            t = getRuntime()-ts;\r\n\r\n            controller.setTarget(getTarget((float)t));\r\n            tryTimeRunnable((float)t);\r\n\r\n            visionPos = vuforia.getPosition(visionPos);\r\n            if (visionPos != null) telemetry.addLine(\"VIZPOZ: \"+visionPos.toString());\r\n            if (visionPos != null) controller.correctForVisionPos(visionPos);\r\n            controller.update(t);\r\n\r\n            if (visionPos != null) telemetry.addLine(\"DIFF: \"+(visionPos.x-controller.getPos().x)+\",\"+(visionPos.y-controller.getPos().y));\r\n            telemetry.addLine(\"POS: \"+controller.getPos().toString());\r\n            telemetry.addLine(\"I: \"+k);\r\n            telemetry.update();\r\n\r\n            JavaHTTPServer.pathData.add(new RobotPos[]{controller.getPos(),visionPos});\r\n        }\r\n        controller.driveController.setMotors_YXR(0,0,0);\r\n\r\n        requestOpModeStop();\r\n    }\r\n\r\n    private RobotPos getTarget(float t) {\r\n        telemetry.addLine(t+\"s\");\r\n        for (int i = 0; i < timeTargets.size(); i++) {\r\n            if (i == timeTargets.size()-1) return timeTargets.get(i).target;\r\n            TimeTarget tt = timeTargets.get(i+1);\r\n            k=i;\r\n            if (t < tt.time) return timeTargets.get(i).target;\r\n        }\r\n        return null;\r\n    }\r\n    private void tryTimeRunnable(float t) {\r\n        for (TimeAction ta : timeActions)\r\n            ta.tryRun(t);\r\n    }\r\n\r\n    public static class TimeTarget {\r\n        public final float time;\r\n        public final RobotPos target;\r\n        public TimeTarget(float time, RobotPos target) {\r\n            this.time = time;\r\n            this.target = target;\r\n        }\r\n    }\r\n    public static class TimeAction {\r\n        public final float time;\r\n        public final Runnable callback;\r\n        public boolean ran = false;\r\n        public TimeAction(float time, Runnable callback) {\r\n            this.time = time;\r\n            this.callback = callback;\r\n        }\r\n        public void tryRun(float t) {\r\n            if (!ran && t > time)\r\n                run();\r\n        }\r\n        private void run() {\r\n            ran = true;\r\n            callback.run();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleops/autos/AutoOpMode.java	(revision afb29bd7ea318c02bb13e02d8294571ea5f27edf)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/teleops/autos/AutoOpMode.java	(date 1615835918848)
@@ -65,7 +65,7 @@
                     timeTargets.add(4,new TimeTarget(8,new RobotPos(-36,36+yoff,-0.141)));
                     timeTargets.add(5,new TimeTarget(11,new RobotPos(-36,-24+yoff,0)));
                     break;
-                case 3:
+                case 4:
                     sounds.play("b2");
                     sounds.play("b1");
                     timeTargets.add(3,new TimeTarget(7,new RobotPos(-48,-48,0.115)));
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/hardware/auto/CompletionWait.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/hardware/auto/CompletionWait.java	(date 1615836079215)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/hardware/auto/CompletionWait.java	(date 1615836079215)
@@ -0,0 +1,13 @@
+package org.firstinspires.ftc.teamcode.hardware.auto;
+
+import android.os.Build;
+
+public class CompletionWait {
+    public CompletionWait() {
+
+    }
+
+    public static interface CheckCallback {
+        boolean run();
+    }
+}
